// server.cjs (Dukan Pro - Ultimate Backend)

const express = require('express');
const { Pool } = require('pg');
const crypto = require('crypto');
const cors = require('cors');
require('dotenv').config(); // .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á environment variables ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç

const app = express();
const PORT = process.env.PORT || 10000;
const SECRET_KEY = process.env.SECRET_KEY || 'your_secret_key_change_it'; 
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'default_admin_password_change_me'; 

// --- Encryption Constants ---
const IV_LENGTH = 16;
const ENCRYPTION_KEY = crypto.createHash('sha256').update(SECRET_KEY).digest(); 

// --- Middlewares ---
app.use(cors());
app.use(express.json());

// --- Database Setup ---
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

/**
 * ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ü‡•á‡§¨‡§≤‡•ç‡§∏ (8 ‡§ü‡•á‡§¨‡§≤‡•ç‡§∏) ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à, ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ü‡•á‡§¨‡§≤‡•ç‡§∏ ‡§ï‡•ã DROP ‡§ï‡§∞‡§ï‡•á ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ Consistency ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * WARNING: ‡§á‡§∏‡§∏‡•á ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§æ ‡§∏‡§æ‡§∞‡§æ ‡§°‡•á‡§ü‡§æ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ!
 */
async function createTables() {
    try {
        // üö® ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•Å‡§ß‡§æ‡§∞: ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è DROP TABLE ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        // ‡§á‡§∏‡§∏‡•á ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§π‡•ã‡§ó‡§æ ‡§ï‡§ø ‡§ï‡•ã‡§° ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡§π‡•Ä ‡§ï‡•â‡§≤‡§Æ ‡§¨‡§®‡§æ‡§è‡•§ (‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§°‡•á‡§ü‡§æ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ)
        await pool.query('DROP TABLE IF EXISTS invoice_items CASCADE;');
        await pool.query('DROP TABLE IF EXISTS invoices CASCADE;');
        await pool.query('DROP TABLE IF EXISTS customers CASCADE;');
        await pool.query('DROP TABLE IF EXISTS stock CASCADE;');
        await pool.query('DROP TABLE IF EXISTS purchases CASCADE;');
        await pool.query('DROP TABLE IF EXISTS expenses CASCADE;');
        await pool.query('DROP TABLE IF EXISTS licenses CASCADE;'); // Licenses table ‡§ï‡•ã ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§°‡•ç‡§∞‡•â‡§™ ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç)
        console.log('‚úÖ Dropped existing tables (Schema Reset).');


        // 1. Licenses Table (‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
        await pool.query(`
            CREATE TABLE licenses (
                key_hash TEXT PRIMARY KEY,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                expiry_date TIMESTAMP WITH TIME ZONE,
                is_trial BOOLEAN DEFAULT FALSE
            );
        `);
        console.log('‚úÖ Licenses table created.');

        // 2. Stock Table (‡§á‡§®‡•ç‡§µ‡•á‡§Ç‡§ü‡•ç‡§∞‡•Ä)
        await pool.query(`
            CREATE TABLE stock (
                id SERIAL PRIMARY KEY,
                sku TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                quantity NUMERIC NOT NULL,
                unit TEXT,
                purchase_price NUMERIC NOT NULL,
                sale_price NUMERIC NOT NULL,
                gst NUMERIC DEFAULT 0,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('‚úÖ Stock table created.');
        
        // 3. Customers Table (‡§ó‡•ç‡§∞‡§æ‡§π‡§ï)
        await pool.query(`
            CREATE TABLE customers (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                phone TEXT UNIQUE,
                email TEXT UNIQUE,
                address TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('‚úÖ Customers table created.');

        // 4. Invoices Table (‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä/Sales)
        await pool.query(`
            CREATE TABLE invoices (
                id SERIAL PRIMARY KEY,
                customer_id INTEGER REFERENCES customers(id),
                total_amount NUMERIC NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('‚úÖ Invoices table created.');

        // 5. Invoice Items Table (‡§á‡§®‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§ö‡•á ‡§ó‡§è ‡§Ü‡§á‡§ü‡§Æ)
        await pool.query(`
            CREATE TABLE invoice_items (
                id SERIAL PRIMARY KEY,
                invoice_id INTEGER REFERENCES invoices(id),
                item_name TEXT NOT NULL,
                quantity NUMERIC NOT NULL,
                sale_price NUMERIC NOT NULL
            );
        `);
        console.log('‚úÖ Invoice Items table created.');
        
        // 6. Purchases Table (‡§ñ‡§∞‡•Ä‡§¶/Purchases)
        await pool.query(`
            CREATE TABLE purchases (
                id SERIAL PRIMARY KEY,
                supplier_name TEXT,
                item_details TEXT NOT NULL,
                total_cost NUMERIC NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('‚úÖ Purchases table created.');
        
        // 7. Expenses Table (‡§ñ‡§∞‡•ç‡§ö/Expenses)
        await pool.query(`
            CREATE TABLE expenses (
                id SERIAL PRIMARY KEY,
                description TEXT NOT NULL,
                category TEXT,
                amount NUMERIC NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('‚úÖ Expenses table created.');

    } catch (err) {
        console.error('Error creating database tables:', err.message);
        process.exit(1);
    }
}

// --- License Utilities ---

function hashKey(key) {
    return crypto.createHash('sha256').update(key).digest('hex');
}

// --- API Routes ---

// 1. Generate License Key
app.post('/api/generate-key', async (req, res) => {
    const { password, days } = req.body;
    
    // üö® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§Å‡§ö (Security Check)
    if (password !== ADMIN_PASSWORD) {
        return res.status(401).json({ success: false, message: '‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°‡•§' });
    }

    // ‡§è‡§ï ‡§∞‡•à‡§Ç‡§°‡§Æ Key ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    const rawKey = crypto.randomBytes(16).toString('hex');
    const keyHash = hashKey(rawKey);

    // ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§‡§ø ‡§§‡§ø‡§•‡§ø (Expiry Date) ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + (days || 30)); // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü 30 ‡§¶‡§ø‡§®

    try {
        await pool.query(
            'INSERT INTO licenses (key_hash, expiry_date, is_trial) VALUES ($1, $2, $3)',
            [keyHash, expiryDate, days === 5]
        );
        
        // ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ Raw Key ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
        res.json({ 
            success: true, 
            key: rawKey, 
            message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§®‡§æ‡§à ‡§ó‡§à‡•§',
            duration_days: days,
            valid_until: expiryDate.toISOString() 
        });
    } catch (err) {
        // ‡§Ø‡§π catch ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Ö‡§¨ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§§‡§¨ ‡§™‡§ï‡§°‡§º‡•á‡§ó‡§æ ‡§ú‡§¨ ‡§∏‡•ç‡§ï‡•Ä‡§Æ‡§æ ‡§†‡•Ä‡§ï ‡§π‡•ã‡§ó‡§æ
        console.error("Error generating key:", err.message);
        res.status(500).json({ success: false, message: '‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§' });
    }
});

// 2. Verify License Key 
app.get('/api/verify-license', async (req, res) => {
    const rawKey = req.query.key;
    if (!rawKey) {
        return res.status(400).json({ success: false, message: '‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    const keyHash = hashKey(rawKey);

    try {
        const result = await pool.query('SELECT expiry_date, is_trial FROM licenses WHERE key_hash = $1', [keyHash]);
        
        if (result.rows.length === 0) {
            return res.json({ success: false, valid: false, message: '‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä‡•§' });
        }

        const license = result.rows[0];
        const expiryDate = new Date(license.expiry_date);
        const now = new Date();
        const isValid = expiryDate > now;

        if (isValid) {
            return res.json({
                success: true,
                valid: true,
                isTrial: license.is_trial,
                message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§î‡§∞ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§',
                expiryDate: expiryDate.toISOString()
            });
        } else {
            return res.json({ success: false, valid: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Ä ‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§' });
        }
    } catch (err) {
        console.error("Error verifying license:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§µ‡§ø‡§´‡§≤: ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§' });
    }
});

// 3. Admin Login
app.post('/api/admin-login', (req, res) => {
    const { password } = req.body;
    
    if (password === ADMIN_PASSWORD) {  
        return res.json({ success: true, message: '‡§è‡§°‡§Æ‡§ø‡§® ‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤‡•§' });
    } else {
        return res.status(401).json({ success: false, message: '‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°‡•§' });
    }
});

// (‡§¨‡§æ‡§ï‡•Ä ‡§ï‡•á API routes ‡§Ø‡§π‡§æ‡§Å ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§π‡•á‡§Ç‡§ó‡•á, ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§â‡§®‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à)
// 4. Stock Management - Add/Update (Simplistic Upsert)
app.post('/api/stock', async (req, res) => {
    const { sku, name, quantity, unit, purchase_price, sale_price, gst } = req.body;
    try {
        const result = await pool.query(
            `INSERT INTO stock (sku, name, quantity, unit, purchase_price, sale_price, gst)
             VALUES ($1, $2, $3, $4, $5, $6, $7)
             ON CONFLICT (sku) DO UPDATE
             SET 
                 quantity = stock.quantity + EXCLUDED.quantity, 
                 purchase_price = EXCLUDED.purchase_price,
                 sale_price = EXCLUDED.sale_price,
                 gst = EXCLUDED.gst,
                 updated_at = CURRENT_TIMESTAMP
             RETURNING *;`,
            [sku, name, quantity, unit, purchase_price, sale_price, gst]
        );
        res.json({ success: true, stock: result.rows[0], message: '‡§∏‡•ç‡§ü‡•â‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡§æ/‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error adding stock:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•ç‡§ü‡•â‡§ï ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// 5. Stock Management - Get All
app.get('/api/stock', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM stock ORDER BY updated_at DESC');
        res.json({ success: true, stock: result.rows });
    } catch (err) {
        console.error("Error fetching stock:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•ç‡§ü‡•â‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§' });
    }
});

// 6. Dashboard Data (Summary Metrics) - PostgreSQL ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ß‡§æ‡§∞‡§æ ‡§ó‡§Ø‡§æ
app.get('/api/get-dashboard-data', async (req, res) => {
    try {
        // 1. ‡§ï‡•Å‡§≤ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∞‡§æ‡§ú‡§∏‡•ç‡§µ (Total Sales Revenue) - Table name corrected to 'invoices'
        // COALESCE(SUM(total_amount), 0) ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ñ‡§æ‡§≤‡•Ä ‡§π‡•ã‡§®‡•á ‡§™‡§∞ 0 ‡§Ü‡§è
        const salesResult = await pool.query("SELECT COALESCE(SUM(total_amount), 0) AS value FROM invoices");
        const totalSalesRevenue = parseFloat(salesResult.rows[0].value);

        // 2. ‡§ï‡•Å‡§≤ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (Total Stock Value)
        const stockValueResult = await pool.query("SELECT COALESCE(SUM(purchase_price * quantity), 0) AS value FROM stock");
        const totalStockValue = parseFloat(stockValueResult.rows[0].value);
        
        // 3. ‡§ï‡•Å‡§≤ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï (Total Customers) - Table name corrected to 'invoices'
        const customerResult = await pool.query("SELECT COUNT(DISTINCT customer_id) AS value FROM invoices WHERE customer_id IS NOT NULL");
        const totalCustomers = parseInt(customerResult.rows[0].value);

        // 4. ‡§ï‡§Æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ü‡§á‡§ü‡§Æ (Low Stock Count)
        const lowStockResult = await pool.query("SELECT COUNT(id) AS value FROM stock WHERE quantity < 10");
        const lowStockCount = parseInt(lowStockResult.rows[0].value);

        // ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç, ‡§∏‡§≠‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã client ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
        res.json({
            success: true,
            totalSalesRevenue: totalSalesRevenue,
            totalStockValue: totalStockValue,
            totalCustomers: totalCustomers,
            lowStockCount: lowStockCount
        });

    } catch (error) {
        console.error('‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§°‡•á‡§ü‡§æ SQL/PostgreSQL ‡§è‡§∞‡§∞:', error.message);
        res.status(500).json({ success: false, message: '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§æ‡•§' });
    }
});

// 7. NEW API: Get Balance Sheet / Detailed Financials Data 
app.get('/api/get-balance-sheet-data', async (req, res) => {
    try {
        // --- 1. Current Inventory Value (Asset) ---
        const inventoryValueResult = await pool.query(`
            SELECT COALESCE(SUM(quantity * purchase_price), 0) AS inventory_value FROM stock;
        `);
        const currentInventoryValue = parseFloat(inventoryValueResult.rows[0].inventory_value);

        // --- 2. Total Revenue (P&L) ---
        const revenueResult = await pool.query(`
            SELECT COALESCE(SUM(total_amount), 0) AS total_revenue FROM invoices;
        `);
        const totalRevenue = parseFloat(revenueResult.rows[0].total_revenue);

        // --- 3. Total Purchases (P&L Cost) ---
        const purchasesResult = await pool.query(`
            SELECT COALESCE(SUM(total_cost), 0) AS total_purchases FROM purchases;
        `);
        const totalPurchases = parseFloat(purchasesResult.rows[0].total_purchases);

        // --- 4. Total Expenses (P&L Cost) ---
        const expensesResult = await pool.query(`
            SELECT COALESCE(SUM(amount), 0) AS total_expenses FROM expenses;
        `);
        const totalExpenses = parseFloat(expensesResult.rows[0].total_expenses);
        
        // --- 5. Calculation ---
        const grossProfit = totalRevenue - totalPurchases;
        const netProfit = grossProfit - totalExpenses;
        const totalAssets = currentInventoryValue; // Simplistic: Inventory is the main asset
        
        res.json({
            success: true,
            balanceSheet: {
                currentAssets: totalAssets,
                // Liabilities ‡§î‡§∞ Equity ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç placeholders ‡§π‡•à‡§Ç, ‡§Ü‡§™ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
                totalLiabilities: 0.00,
                netWorth: totalAssets, // Simplistic
            },
            profitAndLoss: {
                totalRevenue: totalRevenue,
                totalPurchases: totalPurchases,
                totalExpenses: totalExpenses,
                grossProfit: grossProfit,
                netProfit: netProfit
            }
        });

    } catch (err) {
        console.error("Error fetching balance sheet data:", err.message);
        return res.status(500).json({ success: false, message: '‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§' });
    }
});


// --- CRM API Routes (New) ---

// 8. Add Customer
app.post('/api/customer', async (req, res) => {
    const { name, phone, email, address } = req.body;
    try {
        await pool.query(
            `INSERT INTO customers (name, phone, email, address) VALUES ($1, $2, $3, $4)`,
            [name, phone, email, address]
        );
        res.json({ success: true, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error adding customer:", err.message);
        res.status(500).json({ success: false, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§æ‡•§' });
    }
});

// 9. Get Customers
app.get('/api/customer', async (req, res) => {
    try {
        const result = await pool.query(`SELECT * FROM customers ORDER BY created_at DESC;`);
        res.json({ success: true, customers: result.rows });
    } catch (err) {
        console.error("Error fetching customers:", err.message);
        res.status(500).json({ success: false, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§' });
    }
});


// --- Purchases API Routes (New) ---

// 10. Add Purchase
app.post('/api/purchase', async (req, res) => {
    const { supplier_name, item_details, total_cost } = req.body;
    try {
        await pool.query(
            `INSERT INTO purchases (supplier_name, item_details, total_cost) VALUES ($1, $2, $3)`,
            [supplier_name, item_details, total_cost]
        );
        res.json({ success: true, message: '‡§ñ‡§∞‡•Ä‡§¶ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§ï‡•Ä ‡§ó‡§à‡•§' });
    } catch (err) {
        console.error("Error adding purchase:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•Ä‡§¶ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§æ‡•§' });
    }
});

// 11. Get Purchases
app.get('/api/purchase', async (req, res) => {
    try {
        const result = await pool.query(`SELECT * FROM purchases ORDER BY created_at DESC;`);
        res.json({ success: true, purchases: result.rows });
    } catch (err) {
        console.error("Error fetching purchases:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•Ä‡§¶ ‡§∏‡•Ç‡§ö‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§' });
    }
});

// --- Expenses API Routes (New) ---

// 12. Add Expense
app.post('/api/expense', async (req, res) => {
    const { description, category, amount } = req.body;
    try {
        await pool.query(
            `INSERT INTO expenses (description, category, amount) VALUES ($1, $2, $3)`,
            [description, category, amount]
        );
        res.json({ success: true, message: '‡§ñ‡§∞‡•ç‡§ö ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error adding expense:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•ç‡§ö ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§æ‡•§' });
    }
});

// 13. Get Expenses
app.get('/api/expense', async (req, res) => {
    try {
        const result = await pool.query(`SELECT * FROM expenses ORDER BY created_at DESC;`);
        res.json({ success: true, expenses: result.rows });
    } catch (err) {
        console.error("Error fetching expenses:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•ç‡§ö ‡§∏‡•Ç‡§ö‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§' });
    }
});


// --- Server Initialization ---

pool.connect()
    .then(() => {
        console.log('PostgreSQL connection established.');
        return createTables(); // ‡§ü‡•á‡§¨‡§≤‡•ç‡§∏ ‡§¨‡§®‡§æ‡§è‡§Ç/‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç (‡§Ö‡§¨ DROP ‡§ï‡§∞‡§ï‡•á)
    })
    .then(() => {
        app.listen(PORT, () => {
            console.log(`Server is running on port ${PORT}`);
        });
    })
    .catch(err => {
        console.error('Database connection failed:', err.message);
        process.exit(1);
    });

