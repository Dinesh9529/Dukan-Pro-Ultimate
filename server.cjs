// server.cjs (Dukan Pro - Ultimate Backend) - MULTI-USER/SECURE VERSION (EXTENDED)
// -----------------------------------------------------------------------------
// ‡§Ø‡§π ‡§ï‡•ã‡§° JWT, Bcrypt ‡§î‡§∞ PostgreSQL ‡§ï‡•á ‡§∏‡§æ‡§• ‡§è‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§Æ‡§≤‡•ç‡§ü‡•Ä-‡§ü‡•á‡§®‡•á‡§Ç‡§ü ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§∏‡§≠‡•Ä ‡§°‡•á‡§ü‡§æ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ 'shop_id' ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡•Ä‡§Æ‡§ø‡§§ (scoped) ‡§π‡•à‡•§
// -----------------------------------------------------------------------------
// *****************************************************************************
// * ‡§®‡§Ø‡§æ ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§ï‡•ã‡§° ‡§∏‡•á‡§ï‡•ç‡§∂‡§®                            *
// *****************************************************************************

const express = require('express');
const { Pool } = require('pg');
const crypto = require('crypto');
const cors = require('cors');
const jwt = require('jsonwebtoken'); 
const bcrypt = require('bcrypt');
require('dotenv').config();
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
const PORT = process.env.PORT || 10000;
const SECRET_KEY = process.env.SECRET_KEY ||
'a_very_strong_secret_key_for_hashing'; // Must be secure!
const JWT_SECRET = process.env.JWT_SECRET || crypto.randomBytes(64).toString('hex');
// Stronger JWT Secret

// --- Encryption Constants (Retained for license key hashing) ---
const ENCRYPTION_KEY = crypto.createHash('sha256').update(SECRET_KEY).digest();
const SALT_ROUNDS = 10;
// üîí Bcrypt salt rounds for password hashing

// --- Middlewares ---
app.use(cors({
    origin: '*', // ‡§∏‡§≠‡•Ä ‡§ë‡§∞‡§ø‡§ú‡§ø‡§® ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç (‡§°‡§ø‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è)
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    credentials: true,
}));

// PostgreSQL Connection Pool Setup
const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'postgresql://user:password@host:port/database', 
    // ‡§Ü‡§™‡§ï‡•ã ‡§Ö‡§™‡§®‡§æ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§Ø‡§π‡§æ‡§Å ‡§Ø‡§æ .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ
    ssl: {
        rejectUnauthorized: false,
    },
});

pool.on('error', (err) => {
    console.error('‚ùå Unexpected error on idle client', err);
    process.exit(-1);
});

// --- Encryption/Decryption Functions (for license keys) ---
function encrypt(text) {
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv('aes-256-cbc', ENCRYPTION_KEY, iv);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return iv.toString('hex') + ':' + encrypted;
}

function decrypt(text) {
    try {
        const parts = text.split(':');
        if (parts.length !== 2) {
            throw new Error('Invalid encrypted format');
        }
        const iv = Buffer.from(parts[0], 'hex');
        const encryptedText = parts[1];
        const decipher = crypto.createDecipheriv('aes-256-cbc', ENCRYPTION_KEY, iv);
        let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (error) {
        console.error('Decryption failed:', error.message);
        return null;
    }
}

// üîë JWT Verification Middleware (‡§∏‡§≠‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è)
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ success: false, message: '‡§Ö‡§®‡§æ‡§ß‡§ø‡§ï‡•É‡§§: ‡§ü‡•ã‡§ï‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            console.error('JWT Verification Error:', err.message);
            return res.status(403).json({ success: false, message: '‡§Ö‡§µ‡•à‡§ß ‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ü‡•ã‡§ï‡§®‡•§' });
        }
        req.shopId = user.shopId;
        req.userId = user.userId; // ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•á ‡§≤‡§ø‡§è
        req.role = user.role; // ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§ï‡•á ‡§≤‡§ø‡§è
        next();
    });
};

// üõ°Ô∏è Role Authorization Middleware (‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è)
const authorizeAdmin = (req, res, next) => {
    if (req.role !== 'admin') {
        return res.status(403).json({ success: false, message: '‡§Ö‡§®‡§æ‡§ß‡§ø‡§ï‡•É‡§§: ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•Ä ‡§Ø‡§π ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§' });
    }
    next();
};

// I. DATABASE SETUP (‡§ü‡•á‡§¨‡§≤ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£)
// -----------------------------------------------------------------------------

async function createTables() {
    console.log('üîÑ Checking and creating database tables...');
    try {
        // 1. users table (‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•á ‡§Æ‡§æ‡§≤‡§ø‡§ï/‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä) - 'role' ‡§ï‡•â‡§≤‡§Æ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                user_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL,
                username VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE,
                role VARCHAR(50) DEFAULT 'admin', -- 'admin' ‡§Ø‡§æ 'staff' 
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 2. licenses table (‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS licenses (
                license_key VARCHAR(255) PRIMARY KEY,
                shop_id UUID UNIQUE NOT NULL,
                customer_name VARCHAR(255),
                valid_until TIMESTAMP WITH TIME ZONE NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                issued_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 3. products table (‡§â‡§§‡•ç‡§™‡§æ‡§¶) - 'barcode' ‡§î‡§∞ 'hsn_code' ‡§ï‡•â‡§≤‡§Æ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
        await pool.query(`
            CREATE TABLE IF NOT EXISTS products (
                product_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                name VARCHAR(255) NOT NULL,
                unit VARCHAR(50) NOT NULL,
                quantity INT DEFAULT 0,
                cost_price DECIMAL(10, 2) NOT NULL,
                selling_price DECIMAL(10, 2) NOT NULL,
                tax_rate DECIMAL(5, 2) DEFAULT 0.0,
                barcode VARCHAR(100) UNIQUE, -- ‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§∏‡•ç‡§ï‡•à‡§®‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è
                hsn_code VARCHAR(50), -- GSTR ‡§ï‡•á ‡§≤‡§ø‡§è
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 4. customers table (‡§ó‡•ç‡§∞‡§æ‡§π‡§ï)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS customers (
                customer_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                name VARCHAR(255) NOT NULL,
                phone VARCHAR(20) UNIQUE,
                address TEXT,
                gstin VARCHAR(15), -- GSTR ‡§ï‡•á ‡§≤‡§ø‡§è
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 5. sales table (‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§≤‡•á‡§®‡§¶‡•á‡§®)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS sales (
                sale_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                customer_id INT REFERENCES customers(customer_id),
                sale_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                total_amount DECIMAL(10, 2) NOT NULL,
                total_tax DECIMAL(10, 2) DEFAULT 0.0,
                payment_method VARCHAR(50),
                invoice_number VARCHAR(100) UNIQUE,
                is_gstr_applicable BOOLEAN DEFAULT FALSE
            );
        `);

        // 6. sale_items table (‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS sale_items (
                item_id SERIAL PRIMARY KEY,
                sale_id INT NOT NULL REFERENCES sales(sale_id) ON DELETE CASCADE,
                product_id INT NOT NULL REFERENCES products(product_id),
                quantity INT NOT NULL,
                price_per_unit DECIMAL(10, 2) NOT NULL,
                tax_amount DECIMAL(10, 2) NOT NULL,
                cost_price DECIMAL(10, 2) NOT NULL -- P&L ‡§ó‡§£‡§®‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è
            );
        `);

        // 7. expenses table (‡§ñ‡§∞‡•ç‡§ö)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS expenses (
                expense_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                description VARCHAR(255) NOT NULL,
                amount DECIMAL(10, 2) NOT NULL,
                expense_date DATE NOT NULL,
                category VARCHAR(100),
                is_gstr_applicable BOOLEAN DEFAULT FALSE -- GSTR ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è
            );
        `);

        // 8. daily_closings table (‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS daily_closings (
                closing_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                closing_date DATE UNIQUE NOT NULL,
                total_sales DECIMAL(10, 2),
                total_expenses DECIMAL(10, 2),
                cash_in_hand DECIMAL(10, 2),
                notes TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // *********************************************************************
        // * NEW TABLES FOR EXTENDED FUNCTIONALITY                   *
        // *********************************************************************

        // 9. shop_settings table (‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§≤‡•ã‡§ó‡•ã)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS shop_settings (
                shop_id UUID PRIMARY KEY REFERENCES users(shop_id),
                shop_name VARCHAR(255) NOT NULL,
                logo_url TEXT, -- ‡§≤‡•ã‡§ó‡•ã ‡§ï‡•Ä URL
                gstin VARCHAR(15),
                address TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 10. staff table (‡§∏‡•ç‡§ü‡§æ‡§´ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® - ‡§∏‡§∞‡§≤)
        // ‡§®‡•ã‡§ü: ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§°‡•á‡§ü‡§æ 'users' ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§ü‡•á‡§¨‡§≤ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à‡•§
        await pool.query(`
            CREATE TABLE IF NOT EXISTS staff (
                staff_user_id INT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                designation VARCHAR(100),
                phone VARCHAR(20),
                is_active BOOLEAN DEFAULT TRUE,
                permissions JSONB -- ‡§∞‡•ã‡§≤-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è
            );
        `);

        // 11. purchases table (GSTR ‡§î‡§∞ ‡§á‡§®‡•ç‡§µ‡•á‡§Ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS purchases (
                purchase_id SERIAL PRIMARY KEY,
                shop_id UUID NOT NULL REFERENCES users(shop_id),
                purchase_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                supplier_name VARCHAR(255),
                invoice_number VARCHAR(100) UNIQUE,
                total_amount DECIMAL(10, 2) NOT NULL,
                total_tax DECIMAL(10, 2) DEFAULT 0.0,
                gstin VARCHAR(15), -- ‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞ ‡§ï‡§æ GSTIN
                is_gstr_applicable BOOLEAN DEFAULT FALSE
            );
        `);
        
        // 12. purchase_items table (‡§ñ‡§∞‡•Ä‡§¶ ‡§µ‡§ø‡§µ‡§∞‡§£)
        await pool.query(`
            CREATE TABLE IF NOT EXISTS purchase_items (
                p_item_id SERIAL PRIMARY KEY,
                purchase_id INT NOT NULL REFERENCES purchases(purchase_id) ON DELETE CASCADE,
                product_id INT REFERENCES products(product_id),
                product_name VARCHAR(255) NOT NULL,
                quantity INT NOT NULL,
                cost_per_unit DECIMAL(10, 2) NOTFEN,
                tax_amount DECIMAL(10, 2) NOT NULL
            );
        `);

        console.log('‚úÖ Database tables checked/created successfully.');
    } catch (error) {
        console.error('‚ùå Error creating tables:', error.message);
        throw error;
    }
}

// II. AUTHENTICATION AND LICENSE MANAGEMENT (‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§î‡§∞ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®)
// -----------------------------------------------------------------------------

// POST /api/register - ‡§®‡§è ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡§æ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§®
app.post('/api/register', async (req, res) => {
    const { username, password, email, shopName } = req.body;
    if (!username || !password || !email || !shopName) {
        return res.status(400).json({ success: false, message: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç: ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ, ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°, ‡§à‡§Æ‡•á‡§≤, ‡§î‡§∞ ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ‡•§' });
    }

    const shopId = crypto.randomUUID(); // ‡§®‡§Ø‡§æ ‡§∂‡•â‡§™ ID
    try {
        const passwordHash = await bcrypt.hash(password, SALT_ROUNDS);

        // 1. ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã 'admin' ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        await pool.query(
            'INSERT INTO users (shop_id, username, password_hash, email, role) VALUES ($1, $2, $3, $4, $5)',
            [shopId, username, passwordHash, email, 'admin']
        );
        
        // 2. ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        await pool.query(
            'INSERT INTO shop_settings (shop_id, shop_name) VALUES ($1, $2)',
            [shopId, shopName]
        );


        console.log(`‚úÖ New shop registered: ${shopId}, Admin: ${username}`);
        res.json({ success: true, message: '‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§´‡§≤‡•§ ‡§Ö‡§¨ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§' });

    } catch (err) {
        if (err.code === '23505') { // Unique violation error
            return res.status(409).json({ success: false, message: '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡•§' });
        }
        console.error("Error during registration:", err.message);
        res.status(500).json({ success: false, message: '‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// POST /api/login - ‡§¶‡•Å‡§ï‡§æ‡§® ‡§è‡§°‡§Æ‡§ø‡§®/‡§∏‡•ç‡§ü‡§æ‡§´ ‡§≤‡•â‡§ó‡§ø‡§®
app.post('/api/login', async (req, res) => {
    const { username, password, licenseKey } = req.body;
    if (!username || !password || !licenseKey) {
        return res.status(400).json({ success: false, message: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ, ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§î‡§∞ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§≠‡§∞‡•á‡§Ç‡•§' });
    }

    try {
        // 1. ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ï‡•ã ‡§°‡§ø‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        const decryptedKey = decrypt(licenseKey);
        if (!decryptedKey) {
            return res.status(401).json({ success: false, message: '‡§Ö‡§µ‡•à‡§ß ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä‡•§' });
        }

        const [key, shopIdFromKey] = decryptedKey.split('|');
        if (!shopIdFromKey) {
            return res.status(401).json({ success: false, message: '‡§Ö‡§µ‡•à‡§ß ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§' });
        }

        // 2. ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§î‡§∞ ‡§¶‡•Å‡§ï‡§æ‡§® ID ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
        const licenseResult = await pool.query(
            'SELECT * FROM licenses WHERE license_key = $1 AND shop_id = $2 AND is_active = TRUE',
            [key, shopIdFromKey]
        );

        if (licenseResult.rows.length === 0) {
            return res.status(401).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡§æ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§' });
        }

        const license = licenseResult.rows[0];
        if (new Date(license.valid_until) < new Date()) {
            // ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç
            await pool.query(
                'UPDATE licenses SET is_active = FALSE WHERE license_key = $1',
                [key]
            );
            return res.status(403).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§µ‡•Ä‡§®‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç‡•§' });
        }

        const shopId = shopIdFromKey;

        // 3. ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ (‡§è‡§°‡§Æ‡§ø‡§®/‡§∏‡•ç‡§ü‡§æ‡§´) ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
        const userResult = await pool.query(
            'SELECT * FROM users WHERE username = $1 AND shop_id = $2',
            [username, shopId]
        );

        if (userResult.rows.length === 0) {
            return res.status(401).json({ success: false, message: '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§¶‡•Å‡§ï‡§æ‡§® ID ‡§ó‡§≤‡§§ ‡§π‡•à‡•§' });
        }

        const user = userResult.rows[0];
        const isPasswordValid = await bcrypt.compare(password, user.password_hash);

        if (!isPasswordValid) {
            return res.status(401).json({ success: false, message: '‡§ó‡§≤‡§§ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°‡•§' });
        }

        // 4. JWT ‡§ü‡•ã‡§ï‡§® ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç
        const token = jwt.sign(
            { shopId: user.shop_id, userId: user.user_id, username: user.username, role: user.role }, 
            JWT_SECRET, 
            { expiresIn: '24h' }
        );

        console.log(`‚úÖ User logged in: ${username} (Role: ${user.role}, Shop: ${shopId})`);
        res.json({ success: true, token, role: user.role, shopId: user.shop_id, message: '‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });

    } catch (err) {
        console.error("Error during login:", err.message);
        res.status(500).json({ success: false, message: '‡§≤‡•â‡§ó‡§ø‡§® ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// POST /api/verify-license - ‡§ï‡•á‡§µ‡§≤ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§®
app.post('/api/verify-license', async (req, res) => {
    const { licenseKey } = req.body;
    if (!licenseKey) {
        return res.status(400).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        const decryptedKey = decrypt(licenseKey);
        if (!decryptedKey) {
            return res.status(401).json({ success: false, message: '‡§Ö‡§µ‡•à‡§ß ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä‡•§' });
        }

        const [key, shopIdFromKey] = decryptedKey.split('|');
        if (!shopIdFromKey) {
            return res.status(401).json({ success: false, message: '‡§Ö‡§µ‡•à‡§ß ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™‡•§' });
        }

        const result = await pool.query(
            'SELECT valid_until, is_active FROM licenses WHERE license_key = $1 AND shop_id = $2',
            [key, shopIdFromKey]
        );

        if (result.rows.length === 0 || !result.rows[0].is_active) {
            return res.status(401).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡§æ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡•§' });
        }

        const validUntil = new Date(result.rows[0].valid_until);
        if (validUntil < new Date()) {
            return res.status(403).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§' });
        }

        res.json({ success: true, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•à‡•§', validUntil: validUntil.toISOString(), shopId: shopIdFromKey });

    } catch (err) {
        console.error("Error verifying license:", err.message);
        res.status(500).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// -----------------------------------------------------------------------------
// III. ADMIN/LICENSE KEY GENERATION ROUTES (‡§è‡§°‡§Æ‡§ø‡§®/‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£)
// -----------------------------------------------------------------------------

// POST /api/admin/generate-key - ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§®‡•á ‡§π‡•á‡§§‡•Å
app.post('/api/admin/generate-key', async (req, res) => {
    // ‚ö†Ô∏è ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§®‡•ã‡§ü: ‡§á‡§∏ ‡§∞‡•Ç‡§ü ‡§ï‡•ã ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
    // ‡§á‡§∏‡•á ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡•à‡§®‡§≤ ‡§Ø‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§∏‡•á ‡§π‡•Ä ‡§ï‡•â‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
    const { customerName, durationDays, shopId, secret } = req.body;
    
    // ‡§è‡§ï ‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ ‡§ó‡•Å‡§™‡•ç‡§§ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ú‡§æ‡§Å‡§ö (‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Æ‡•á‡§Ç JWT Auth ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç)
    if (secret !== 'DUKAN_PRO_ADMIN_SECRET') { 
        return res.status(403).json({ success: false, message: '‡§Ö‡§®‡§æ‡§ß‡§ø‡§ï‡•É‡§§ ‡§è‡§°‡§Æ‡§ø‡§® ‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡•§' });
    }

    if (!customerName || !durationDays || !shopId) {
        return res.status(400).json({ success: false, message: '‡§∏‡§≠‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§' });
    }

    const key = crypto.randomBytes(16).toString('hex'); // ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡•Å‡§Ç‡§ú‡•Ä
    const encryptedKey = encrypt(`${key}|${shopId}`); // ‡§∂‡•â‡§™ ID ‡§ï‡•á ‡§∏‡§æ‡§• ‡§è‡§®‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
    const validUntil = new Date();
    validUntil.setDate(validUntil.getDate() + parseInt(durationDays, 10));

    try {
        await pool.query(
            'INSERT INTO licenses (license_key, shop_id, customer_name, valid_until, is_active) VALUES ($1, $2, $3, $4, TRUE) ON CONFLICT (license_key) DO UPDATE SET valid_until = $4, is_active = TRUE',
            [key, shopId, customerName, validUntil.toISOString()]
        );
        
        console.log(`‚úÖ License key generated for Shop: ${shopId}, Customer: ${customerName}`);
        res.json({ 
            success: true, 
            key: encryptedKey, 
            customer: customerName, 
            duration_days: durationDays, 
            valid_until: validUntil.toISOString() 
        });

    } catch (err) {
        console.error("Error generating license key:", err.message);
        res.status(500).json({ success: false, message: '‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});


// -----------------------------------------------------------------------------
// IV. APPLICATION DATA ROUTES (‡§Ü‡§µ‡•á‡§¶‡§® ‡§°‡•á‡§ü‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó) - SECURED
// -----------------------------------------------------------------------------
app.use(authenticateToken); // ‡§á‡§∏‡§ï‡•á ‡§®‡•Ä‡§ö‡•á ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§∞‡•Ç‡§ü‡•ç‡§∏ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡§Ç

// *********************************************************************
// * NEW: SHOP SETTINGS AND CONFIGURATION API                *
// *********************************************************************

// POST /api/settings/save - ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§π‡•á‡§ú‡•á‡§Ç (Logo, Name, GSTIN)
app.post('/api/settings/save', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { shopName, logoUrl, gstin, address } = req.body;

    if (!shopName) {
        return res.status(400).json({ success: false, message: '‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        // shop_settings ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§°‡•á‡§ü‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§Ø‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç
        const query = `
            INSERT INTO shop_settings (shop_id, shop_name, logo_url, gstin, address)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (shop_id) DO UPDATE
            SET shop_name = $2, logo_url = $3, gstin = $4, address = $5
            RETURNING *;
        `;
        const result = await pool.query(query, [shopId, shopName, logoUrl || null, gstin || null, address || null]);

        // ‡§∏‡§æ‡§• ‡§π‡•Ä users ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç username ‡§ï‡•ã ‡§≠‡•Ä ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§¶‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•ã
        // (‡§™‡§∞‡§Ç‡§§‡•Å ‡§Ø‡§π‡§æ‡§Å ‡§π‡§Æ ‡§ï‡•á‡§µ‡§≤ settings ‡§™‡§∞ ‡§´‡•ã‡§ï‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç)

        console.log(`‚úÖ Shop settings saved for: ${shopId}`);
        res.json({ success: true, message: '‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à‡§Ç‡•§', settings: result.rows[0] });
    } catch (err) {
        console.error("Error saving shop settings:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/settings/get - ‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§™‡§∞ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
app.get('/api/settings/get', async (req, res) => {
    const shopId = req.shopId;
    try {
        const result = await pool.query(
            'SELECT shop_name, logo_url, gstin, address FROM shop_settings WHERE shop_id = $1',
            [shopId]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ success: false, message: '‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç‡•§' });
        }

        console.log(`‚úÖ Shop settings fetched for: ${shopId}`);
        res.json({ success: true, settings: result.rows[0] });
    } catch (err) {
        console.error("Error fetching shop settings:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// *********************************************************************
// * NEW: BARCODE SCANNER LOOKUP API                        *
// *********************************************************************

// GET /api/products/barcode/:barcode - ‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
app.get('/api/products/barcode/:barcode', async (req, res) => {
    const shopId = req.shopId;
    const { barcode } = req.params;

    if (!barcode) {
        return res.status(400).json({ success: false, message: '‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        const result = await pool.query(
            'SELECT product_id, name, selling_price, quantity, unit, tax_rate, barcode FROM products WHERE shop_id = $1 AND barcode = $2',
            [shopId, barcode]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ success: false, message: '‡§á‡§∏ ‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§' });
        }

        console.log(`‚úÖ Barcode lookup successful for: ${barcode}`);
        res.json({ success: true, product: result.rows[0] });
    } catch (err) {
        console.error("Error during barcode lookup:", err.message);
        res.status(500).json({ success: false, message: '‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§≤‡•Å‡§ï‡§Ö‡§™ ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});


// *********************************************************************
// * NEW: STAFF/ROLE MANAGEMENT API (‡§∏‡•ç‡§ü‡§æ‡§´/‡§∞‡•ã‡§≤ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®)         *
// *********************************************************************

// POST /api/staff/add - ‡§®‡§Ø‡§æ ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
app.post('/api/staff/add', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { username, password, email, designation, phone } = req.body;

    if (!username || !password || !email || !designation) {
        return res.status(400).json({ success: false, message: '‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç‡•§' });
    }

    try {
        const passwordHash = await bcrypt.hash(password, SALT_ROUNDS);
        
        // 1. users ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§®‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ (role: staff) ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        const userResult = await pool.query(
            'INSERT INTO users (shop_id, username, password_hash, email, role) VALUES ($1, $2, $3, $4, $5) RETURNING user_id',
            [shopId, username, passwordHash, email, 'staff']
        );
        const newUserId = userResult.rows[0].user_id;

        // 2. staff ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        await pool.query(
            'INSERT INTO staff (staff_user_id, shop_id, designation, phone) VALUES ($1, $2, $3, $4)',
            [newUserId, shopId, designation, phone || null]
        );

        console.log(`‚úÖ New staff member added: ${username}, User ID: ${newUserId}`);
        res.json({ success: true, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ‡•§' });

    } catch (err) {
        if (err.code === '23505') {
            return res.status(409).json({ success: false, message: '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡•§' });
        }
        console.error("Error adding staff:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/staff/list - ‡§∏‡§≠‡•Ä ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä (‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡§ï‡§∞)
app.get('/api/staff/list', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    try {
        const query = `
            SELECT 
                u.user_id, u.username, u.email, u.role, 
                s.designation, s.phone, s.is_active, s.permissions
            FROM users u
            JOIN staff s ON u.user_id = s.staff_user_id
            WHERE u.shop_id = $1 AND u.role = 'staff'
            ORDER BY u.user_id;
        `;
        const result = await pool.query(query, [shopId]);

        console.log(`‚úÖ Fetched ${result.rows.length} staff members.`);
        res.json({ success: true, staff: result.rows });
    } catch (err) {
        console.error("Error fetching staff list:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡•Ç‡§ö‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// PUT /api/staff/update/:userId - ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
app.put('/api/staff/update/:userId', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const staffUserId = req.params.userId;
    const { email, designation, phone, isActive, permissions } = req.body;

    try {
        // 1. users ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§à‡§Æ‡•á‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        if (email) {
            await pool.query(
                'UPDATE users SET email = $1 WHERE user_id = $2 AND shop_id = $3 AND role = \'staff\'',
                [email, staffUserId, shopId]
            );
        }

        // 2. staff ‡§ü‡•á‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        const result = await pool.query(
            'UPDATE staff SET designation = $1, phone = $2, is_active = $3, permissions = $4 WHERE staff_user_id = $5 AND shop_id = $6 RETURNING *',
            [designation || null, phone || null, isActive, permissions || null, staffUserId, shopId]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ success: false, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§Ø‡§æ ‡§µ‡§π ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•à‡•§' });
        }

        console.log(`‚úÖ Staff member updated: User ID ${staffUserId}`);
        res.json({ success: true, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error updating staff:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§Ö‡§™‡§°‡•á‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// DELETE /api/staff/delete/:userId - ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
app.delete('/api/staff/delete/:userId', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const staffUserId = req.params.userId;

    try {
        // staff ‡§î‡§∞ users ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ü‡•á‡§¨‡§≤ ‡§∏‡•á ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç (cascading delete ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á)
        // PostgreSQL foreign key constraint ON DELETE CASCADE ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ staff ‡§ü‡•á‡§¨‡§≤ ‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
        const result = await pool.query(
            'DELETE FROM users WHERE user_id = $1 AND shop_id = $2 AND role = \'staff\' RETURNING *',
            [staffUserId, shopId]
        );

        if (result.rowCount === 0) {
            return res.status(404).json({ success: false, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§Ø‡§æ ‡§µ‡§π ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•à‡•§' });
        }

        console.log(`‚úÖ Staff member deleted: User ID ${staffUserId}`);
        res.json({ success: true, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error deleting staff:", err.message);
        res.status(500).json({ success: false, message: '‡§∏‡•ç‡§ü‡§æ‡§´ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});


// *********************************************************************
// * NEW: GSTR REPORTS API (GSTR 1, 2, 3)             *
// *********************************************************************

// Note: GSTR calculation is complex and simplified here for demonstration.
// In real-world, it requires detailed invoice mapping, tax types (CGST, SGST, IGST), and HSN summaries.

// GET /api/reports/gstr1 - GSTR-1 ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü (‡§Ü‡§â‡§ü‡§µ‡§∞‡•ç‡§° ‡§∏‡§™‡•ç‡§≤‡§æ‡§à - ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä)
app.get('/api/reports/gstr1', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { startDate, endDate } = req.query; // e.g., '2024-04-01', '2024-04-30'

    if (!startDate || !endDate) {
        return res.status(400).json({ success: false, message: 'GSTR ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è Start Date ‡§î‡§∞ End Date ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        // GSTR-1: B2B/B2C Sales Summary (Simplified)
        const gstr1Query = `
            SELECT
                DATE(s.sale_date) AS sale_date,
                s.invoice_number,
                c.gstin AS customer_gstin,
                s.total_amount,
                s.total_tax,
                (s.total_amount - s.total_tax) AS taxable_value,
                (SELECT json_agg(json_build_object(
                    'product_name', p.name,
                    'hsn_code', p.hsn_code,
                    'quantity', si.quantity,
                    'tax_rate', p.tax_rate,
                    'taxable_value', (si.price_per_unit * si.quantity - si.tax_amount),
                    'tax_amount', si.tax_amount
                )) FROM sale_items si JOIN products p ON si.product_id = p.product_id WHERE si.sale_id = s.sale_id) AS items_detail
            FROM sales s
            LEFT JOIN customers c ON s.customer_id = c.customer_id
            WHERE s.shop_id = $1
            AND s.is_gstr_applicable = TRUE
            AND s.sale_date BETWEEN $2 AND $3
            ORDER BY s.sale_date;
        `;
        const result = await pool.query(gstr1Query, [shopId, startDate, endDate]);

        console.log(`‚úÖ GSTR-1 Report generated for ${shopId}`);
        res.json({ 
            success: true, 
            report: {
                period: `${startDate} to ${endDate}`,
                total_sales_taxable: result.rows.reduce((sum, r) => sum + parseFloat(r.taxable_value), 0).toFixed(2),
                total_tax_collected: result.rows.reduce((sum, r) => sum + parseFloat(r.total_tax), 0).toFixed(2),
                sales_data: result.rows
            },
            message: 'GSTR-1 (‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä) ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®‡•§' 
        });
    } catch (err) {
        console.error("Error generating GSTR-1 report:", err.message);
        res.status(500).json({ success: false, message: 'GSTR-1 ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/reports/gstr2 - GSTR-2 ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü (‡§á‡§®‡§µ‡§∞‡•ç‡§° ‡§∏‡§™‡•ç‡§≤‡§æ‡§à - ‡§ñ‡§∞‡•Ä‡§¶)
app.get('/api/reports/gstr2', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { startDate, endDate } = req.query;

    if (!startDate || !endDate) {
        return res.status(400).json({ success: false, message: 'GSTR ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è Start Date ‡§î‡§∞ End Date ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        // GSTR-2: Purchase/Expense Summary for Input Tax Credit (ITC) (Simplified)
        const gstr2Query = `
            -- 1. Purchases (Goods)
            SELECT
                'Purchase' AS type,
                p.purchase_date AS date,
                p.invoice_number,
                p.supplier_name,
                p.gstin AS supplier_gstin,
                p.total_amount,
                p.total_tax AS itc_eligible_tax,
                (p.total_amount - p.total_tax) AS taxable_value
            FROM purchases p
            WHERE p.shop_id = $1
            AND p.is_gstr_applicable = TRUE
            AND p.purchase_date BETWEEN $2 AND $3
            
            UNION ALL
            
            -- 2. Expenses (Services/Other Inputs)
            SELECT
                'Expense' AS type,
                e.expense_date AS date,
                'N/A' AS invoice_number,
                e.description AS supplier_name,
                'N/A' AS supplier_gstin,
                e.amount AS total_amount,
                e.amount * 0.18 / 1.18 AS itc_eligible_tax, -- ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡§æ‡§® ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ü‡•à‡§ï‡•ç‡§∏ 18% ‡§π‡•à
                e.amount / 1.18 AS taxable_value
            FROM expenses e
            WHERE e.shop_id = $1
            AND e.is_gstr_applicable = TRUE
            AND e.expense_date BETWEEN $2 AND $3
            ORDER BY date;
        `;
        const result = await pool.query(gstr2Query, [shopId, startDate, endDate]);
        
        const totalITC = result.rows.reduce((sum, r) => sum + parseFloat(r.itc_eligible_tax), 0).toFixed(2);

        console.log(`‚úÖ GSTR-2 Report generated for ${shopId}`);
        res.json({ 
            success: true, 
            report: {
                period: `${startDate} to ${endDate}`,
                total_input_tax_credit: totalITC,
                purchase_and_expense_data: result.rows
            },
            message: 'GSTR-2 (‡§ñ‡§∞‡•Ä‡§¶/‡§Ü‡§à‡§ü‡•Ä‡§∏‡•Ä) ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®‡•§' 
        });
    } catch (err) {
        console.error("Error generating GSTR-2 report:", err.message);
        res.status(500).json({ success: false, message: 'GSTR-2 ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/reports/gstr3 - GSTR-3B ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü (‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂)
app.get('/api/reports/gstr3', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { startDate, endDate } = req.query;

    if (!startDate || !endDate) {
        return res.status(400).json({ success: false, message: 'GSTR ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è Start Date ‡§î‡§∞ End Date ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        // GSTR-3B: Outward Liability (GSTR-1) - Inward ITC (GSTR-2) = Tax Payable/Refundable
        
        // 1. Calculate Outward Tax Liability (GSTR-1 Component)
        const outwardTaxResult = await pool.query(`
            SELECT COALESCE(SUM(total_tax), 0) AS total_liability
            FROM sales
            WHERE shop_id = $1 AND is_gstr_applicable = TRUE
            AND sale_date BETWEEN $2 AND $3;
        `, [shopId, startDate, endDate]);
        const totalLiability = parseFloat(outwardTaxResult.rows[0].total_liability);

        // 2. Calculate Input Tax Credit (GSTR-2 Component)
        const purchaseITCResult = await pool.query(`
            SELECT COALESCE(SUM(total_tax), 0) AS purchase_itc
            FROM purchases
            WHERE shop_id = $1 AND is_gstr_applicable = TRUE
            AND purchase_date BETWEEN $2 AND $3;
        `, [shopId, startDate, endDate]);
        const purchaseITC = parseFloat(purchaseITCResult.rows[0].purchase_itc);

        // 3. Estimate Expense ITC (from GSTR-2 query - simplified to 18% tax rate)
        const expenseITCResult = await pool.query(`
            SELECT COALESCE(SUM(amount), 0) AS total_expense
            FROM expenses
            WHERE shop_id = $1 AND is_gstr_applicable = TRUE
            AND expense_date BETWEEN $2 AND $3;
        `, [shopId, startDate, endDate]);
        const totalExpense = parseFloat(expenseITCResult.rows[0].total_expense);
        // Simplified ITC calculation for expenses (assumes 18% tax on total expense amount)
        const expenseITC = totalExpense > 0 ? (totalExpense * 0.18 / 1.18) : 0;
        
        const totalITC = purchaseITC + expenseITC;
        const taxPayable = totalLiability - totalITC;

        const reportSummary = {
            period: `${startDate} to ${endDate}`,
            outward_tax_liability: totalLiability.toFixed(2),
            total_input_tax_credit: totalITC.toFixed(2),
            tax_payable_refundable: taxPayable.toFixed(2), // +ve = Payable, -ve = Refundable
            purchase_itc: purchaseITC.toFixed(2),
            expense_itc: expenseITC.toFixed(2)
        };

        console.log(`‚úÖ GSTR-3B Report generated for ${shopId}`);
        res.json({ 
            success: true, 
            report: reportSummary,
            message: 'GSTR-3B (‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂) ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®‡•§ (‡§∏‡§∞‡§≤‡•Ä‡§ï‡•É‡§§)'
        });
    } catch (err) {
        console.error("Error generating GSTR-3B report:", err.message);
        res.status(500).json({ success: false, message: 'GSTR-3B ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});


// *********************************************************************
// * NEW: DETAILED FINANCIAL REPORTS API                    *
// *********************************************************************

// GET /api/reports/product-pl - ‡§™‡•ç‡§∞‡§§‡§ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶ P&L (Profit & Loss) ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü
app.get('/api/reports/product-pl', async (req, res) => {
    const shopId = req.shopId;
    const { startDate, endDate } = req.query; // Optional

    try {
        const dateClause = (startDate && endDate) ? `AND s.sale_date BETWEEN '${startDate}' AND '${endDate}'` : '';

        const productPLQuery = `
            SELECT
                p.product_id,
                p.name AS product_name,
                p.unit,
                COALESCE(SUM(si.quantity), 0) AS total_quantity_sold,
                COALESCE(SUM(si.quantity * si.price_per_unit), 0) AS total_revenue,
                COALESCE(SUM(si.quantity * si.cost_price), 0) AS total_cost_of_goods_sold,
                (COALESCE(SUM(si.quantity * si.price_per_unit), 0) - COALESCE(SUM(si.quantity * si.cost_price), 0)) AS gross_profit
            FROM sale_items si
            JOIN sales s ON si.sale_id = s.sale_id
            JOIN products p ON si.product_id = p.product_id
            WHERE s.shop_id = $1 ${dateClause}
            GROUP BY p.product_id, p.name, p.unit
            HAVING COALESCE(SUM(si.quantity), 0) > 0
            ORDER BY gross_profit DESC;
        `;
        const result = await pool.query(productPLQuery, [shopId]);

        console.log(`‚úÖ Product-wise P&L Report generated for ${shopId}`);
        res.json({ 
            success: true, 
            report: result.rows,
            message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶-‡§µ‡§æ‡§∞ ‡§≤‡§æ‡§≠ ‡§î‡§∞ ‡§π‡§æ‡§®‡§ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§®‡•§' 
        });
    } catch (err) {
        console.error("Error generating product P&L report:", err.message);
        res.status(500).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶-‡§µ‡§æ‡§∞ P&L ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/reports/detailed-balancesheet - ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§∂‡•Ä‡§ü ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü (‡§∏‡§∞‡§≤‡•Ä‡§ï‡•É‡§§)
app.get('/api/reports/detailed-balancesheet', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;

    try {
        // Assets (Current Assets - Simplified)
        // 1. Inventory Value
        const inventoryResult = await pool.query(`
            SELECT COALESCE(SUM(quantity * cost_price), 0) AS total_inventory_value
            FROM products
            WHERE shop_id = $1;
        `, [shopId]);
        const inventoryValue = parseFloat(inventoryResult.rows[0].total_inventory_value);

        // 2. Receivables (Pending Customer Balances - Not tracked, assumed 0)
        const receivables = 0.00;

        // Liabilities (Current Liabilities - Simplified)
        // 1. Payables (Pending Supplier Balances - Not tracked, assumed 0)
        const payables = 0.00;

        // Equity (Simplified Retained Earnings calculation)
        // 1. Net Profit (Last period, assumed from a general P&L calculation)
        
        // General P&L (Total Sales Revenue - Total COGS - Total Expenses)
        const totalSalesResult = await pool.query(`
            SELECT COALESCE(SUM(total_amount), 0) AS total_revenue
            FROM sales
            WHERE shop_id = $1;
        `, [shopId]);
        const totalRevenue = parseFloat(totalSalesResult.rows[0].total_revenue);

        const totalCOGSResult = await pool.query(`
            SELECT COALESCE(SUM(si.quantity * si.cost_price), 0) AS total_cogs
            FROM sale_items si
            JOIN sales s ON si.sale_id = s.sale_id
            WHERE s.shop_id = $1;
        `, [shopId]);
        const totalCOGS = parseFloat(totalCOGSResult.rows[0].total_cogs);

        const totalExpensesResult = await pool.query(`
            SELECT COALESCE(SUM(amount), 0) AS total_expense
            FROM expenses
            WHERE shop_id = $1;
        `, [shopId]);
        const totalExpense = parseFloat(totalExpensesResult.rows[0].total_expense);

        const netProfit = totalRevenue - totalCOGS - totalExpense;
        const netProfitAdjusted = netProfit - payables; // Simplified adjustment

        const balanceSheet = {
            assets: {
                total_current_assets: (inventoryValue + receivables).toFixed(2),
                inventory_value: inventoryValue.toFixed(2),
                cash_and_bank: 'N/A (Cash flow not tracked here)',
                accounts_receivable: receivables.toFixed(2)
            },
            liabilities: {
                total_current_liabilities: payables.toFixed(2),
                accounts_payable: payables.toFixed(2)
            },
            equity: {
                owner_equity_or_retained_earnings: netProfitAdjusted.toFixed(2),
                current_net_profit: netProfit.toFixed(2)
            },
            is_balanced: (inventoryValue + receivables).toFixed(2) === (payables + netProfitAdjusted).toFixed(2)
        };

        console.log(`‚úÖ Detailed Balance Sheet generated for ${shopId}`);
        res.json({ 
            success: true, 
            report: balanceSheet,
            message: '‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§∂‡•Ä‡§ü ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® (‡§∏‡§∞‡§≤‡•Ä‡§ï‡•É‡§§)‡•§' 
        });
    } catch (err) {
        console.error("Error generating detailed balance sheet report:", err.message);
        res.status(500).json({ success: false, message: '‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§∂‡•Ä‡§ü ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});


// -----------------------------------------------------------------------------
// V. ORIGINAL APPLICATION DATA ROUTES (PRODUCTS, SALES, CUSTOMERS, EXPENSES, ETC.)
// -----------------------------------------------------------------------------
// *********************************************************************
// * Existing routes preserved below this line               *
// *********************************************************************

// ----------------------------------------------------------------------------
// 1. PRODUCTS (‡§â‡§§‡•ç‡§™‡§æ‡§¶)
// ----------------------------------------------------------------------------

// POST /api/products - ‡§®‡§Ø‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
app.post('/api/products', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { name, unit, quantity, costPrice, sellingPrice, taxRate, barcode, hsnCode } = req.body;
    
    if (!name || !unit || !costPrice || !sellingPrice) {
        return res.status(400).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§á‡§ï‡§æ‡§à, ‡§≤‡§æ‡§ó‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§î‡§∞ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }
    
    try {
        const result = await pool.query(
            `INSERT INTO products (shop_id, name, unit, quantity, cost_price, selling_price, tax_rate, barcode, hsn_code) 
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *`,
            [shopId, name, unit, quantity || 0, costPrice, sellingPrice, taxRate || 0.0, barcode || null, hsnCode || null]
        );
        console.log(`‚úÖ Product added: ${name}`);
        res.json({ success: true, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ‡•§', product: result.rows[0] });
    } catch (err) {
        if (err.code === '23505' && err.constraint === 'products_barcode_key') {
             return res.status(409).json({ success: false, message: '‡§Ø‡§π ‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§' });
        }
        console.error("Error adding product:", err.message);
        res.status(500).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/products - ‡§∏‡§≠‡•Ä ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
app.get('/api/products', async (req, res) => {
    const shopId = req.shopId;
    try {
        const result = await pool.query(
            'SELECT * FROM products WHERE shop_id = $1 ORDER BY product_id DESC',
            [shopId]
        );
        res.json({ success: true, products: result.rows });
    } catch (err) {
        console.error("Error fetching products:", err.message);
        res.status(500).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// PUT /api/products/:id - ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
app.put('/api/products/:id', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const productId = req.params.id;
    const { name, unit, quantity, costPrice, sellingPrice, taxRate, barcode, hsnCode } = req.body;

    if (!name || !unit || !costPrice || !sellingPrice) {
        return res.status(400).json({ success: false, message: '‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç‡•§' });
    }

    try {
        const result = await pool.query(
            `UPDATE products SET 
                name = $1, unit = $2, quantity = $3, cost_price = $4, selling_price = $5, tax_rate = $6, barcode = $7, hsn_code = $8
             WHERE product_id = $9 AND shop_id = $10 RETURNING *`,
            [name, unit, quantity, costPrice, sellingPrice, taxRate || 0.0, barcode || null, hsnCode || null, productId, shopId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§' });
        }

        console.log(`‚úÖ Product updated: ${productId}`);
        res.json({ success: true, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§', product: result.rows[0] });
    } catch (err) {
        if (err.code === '23505' && err.constraint === 'products_barcode_key') {
             return res.status(409).json({ success: false, message: '‡§Ø‡§π ‡§¨‡§æ‡§∞‡§ï‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§Ö‡§®‡•ç‡§Ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§' });
        }
        console.error("Error updating product:", err.message);
        res.status(500).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// DELETE /api/products/:id - ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
app.delete('/api/products/:id', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const productId = req.params.id;

    try {
        const result = await pool.query(
            'DELETE FROM products WHERE product_id = $1 AND shop_id = $2 RETURNING *',
            [productId, shopId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§' });
        }

        console.log(`‚úÖ Product deleted: ${productId}`);
        res.json({ success: true, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error deleting product:", err.message);
        res.status(500).json({ success: false, message: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// ----------------------------------------------------------------------------
// 2. SALES (‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä)
// ----------------------------------------------------------------------------

// POST /api/sales - ‡§®‡§à ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
app.post('/api/sales', async (req, res) => {
    const shopId = req.shopId;
    const { 
        customerId, 
        totalAmount, 
        totalTax, 
        paymentMethod, 
        invoiceNumber, 
        items, 
        isGSTRApplicable 
    } = req.body;

    if (!totalAmount || !items || items.length === 0) {
        return res.status(400).json({ success: false, message: '‡§ï‡•Å‡§≤ ‡§∞‡§æ‡§∂‡§ø ‡§î‡§∞ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§Ü‡§á‡§ü‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§' });
    }

    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // 1. Sale ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§°‡§æ‡§≤‡•á‡§Ç
        const saleResult = await client.query(
            `INSERT INTO sales (shop_id, customer_id, total_amount, total_tax, payment_method, invoice_number, is_gstr_applicable) 
             VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING sale_id, invoice_number, sale_date`,
            [shopId, customerId || null, totalAmount, totalTax || 0.0, paymentMethod, invoiceNumber, isGSTRApplicable || false]
        );
        const saleId = saleResult.rows[0].sale_id;
        const newInvoiceNumber = saleResult.rows[0].invoice_number;
        const saleDate = saleResult.rows[0].sale_date;

        // 2. Sale Items ‡§î‡§∞ Product Inventory ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        for (const item of items) {
            const productResult = await client.query(
                'SELECT cost_price, quantity FROM products WHERE product_id = $1 AND shop_id = $2',
                [item.productId, shopId]
            );

            if (productResult.rows.length === 0) {
                 throw new Error(`‡§â‡§§‡•ç‡§™‡§æ‡§¶ ID ${item.productId} ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§`);
            }
            
            const { cost_price: productCostPrice, quantity: currentQuantity } = productResult.rows[0];
            const newQuantity = currentQuantity - item.quantity;
            
            if (newQuantity < 0) {
                 throw new Error(`‡§â‡§§‡•ç‡§™‡§æ‡§¶ ${item.productId} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§∏‡•ç‡§ü‡•â‡§ï‡•§`);
            }
            
            // Sale Item ‡§°‡§æ‡§≤‡•á‡§Ç
            await client.query(
                `INSERT INTO sale_items (sale_id, product_id, quantity, price_per_unit, tax_amount, cost_price) 
                 VALUES ($1, $2, $3, $4, $5, $6)`,
                [saleId, item.productId, item.quantity, item.pricePerUnit, item.taxAmount || 0.0, productCostPrice]
            );

            // Product Inventory ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            await client.query(
                'UPDATE products SET quantity = $1 WHERE product_id = $2 AND shop_id = $3',
                [newQuantity, item.productId, shopId]
            );
        }

        await client.query('COMMIT');

        console.log(`‚úÖ New sale recorded: Invoice ${newInvoiceNumber}`);
        res.json({ success: true, message: '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à‡•§', sale: { saleId, invoiceNumber: newInvoiceNumber, saleDate } });
    } catch (err) {
        await client.query('ROLLBACK');
        console.error("Error creating sale:", err.message);
        res.status(500).json({ success: false, message: '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    } finally {
        client.release();
    }
});

// GET /api/sales - ‡§∏‡§≠‡•Ä ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç (‡§ï‡•á‡§µ‡§≤ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂)
app.get('/api/sales', async (req, res) => {
    const shopId = req.shopId;
    try {
        const result = await pool.query(
            `SELECT 
                s.sale_id, 
                s.sale_date, 
                s.invoice_number, 
                s.total_amount, 
                s.total_tax,
                s.payment_method,
                c.name AS customer_name
             FROM sales s
             LEFT JOIN customers c ON s.customer_id = c.customer_id
             WHERE s.shop_id = $1 
             ORDER BY s.sale_date DESC`,
            [shopId]
        );
        res.json({ success: true, sales: result.rows });
    } catch (err) {
        console.error("Error fetching sales:", err.message);
        res.status(500).json({ success: false, message: '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/sales/:id - ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
app.get('/api/sales/:id', async (req, res) => {
    const shopId = req.shopId;
    const saleId = req.params.id;
    try {
        // Sale Header
        const saleResult = await pool.query(
            `SELECT 
                s.*, 
                c.name AS customer_name, 
                c.phone AS customer_phone,
                c.address AS customer_address,
                c.gstin AS customer_gstin
             FROM sales s
             LEFT JOIN customers c ON s.customer_id = c.customer_id
             WHERE s.sale_id = $1 AND s.shop_id = $2`,
            [saleId, shopId]
        );

        if (saleResult.rows.length === 0) {
            return res.status(404).json({ success: false, message: '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§' });
        }

        // Sale Items
        const itemsResult = await pool.query(
            `SELECT 
                si.*, 
                p.name AS product_name, 
                p.unit 
             FROM sale_items si
             JOIN products p ON si.product_id = p.product_id
             WHERE si.sale_id = $1`,
            [saleId]
        );

        const saleData = {
            ...saleResult.rows[0],
            items: itemsResult.rows
        };

        res.json({ success: true, sale: saleData });
    } catch (err) {
        console.error("Error fetching sale details:", err.message);
        res.status(500).json({ success: false, message: '‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// ----------------------------------------------------------------------------
// 3. CUSTOMERS (‡§ó‡•ç‡§∞‡§æ‡§π‡§ï)
// ----------------------------------------------------------------------------

// POST /api/customers - ‡§®‡§Ø‡§æ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
app.post('/api/customers', async (req, res) => {
    const shopId = req.shopId;
    const { name, phone, address, gstin } = req.body;
    
    if (!name || !phone) {
        return res.status(400).json({ success: false, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        const result = await pool.query(
            `INSERT INTO customers (shop_id, name, phone, address, gstin) 
             VALUES ($1, $2, $3, $4, $5) 
             ON CONFLICT (phone) 
             DO UPDATE SET name = EXCLUDED.name, address = EXCLUDED.address, gstin = EXCLUDED.gstin RETURNING *`,
            [shopId, name, phone, address || null, gstin || null]
        );
        console.log(`‚úÖ Customer added/updated: ${name}`);
        res.json({ success: true, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡§æ/‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§', customer: result.rows[0] });
    } catch (err) {
        console.error("Error adding customer:", err.message);
        res.status(500).json({ success: false, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/customers - ‡§∏‡§≠‡•Ä ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
app.get('/api/customers', async (req, res) => {
    const shopId = req.shopId;
    try {
        const result = await pool.query(
            'SELECT * FROM customers WHERE shop_id = $1 ORDER BY customer_id DESC',
            [shopId]
        );
        res.json({ success: true, customers: result.rows });
    } catch (err) {
        console.error("Error fetching customers:", err.message);
        res.status(500).json({ success: false, message: '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// ----------------------------------------------------------------------------
// 4. EXPENSES (‡§ñ‡§∞‡•ç‡§ö)
// ----------------------------------------------------------------------------

// POST /api/expenses - ‡§®‡§Ø‡§æ ‡§ñ‡§∞‡•ç‡§ö ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
app.post('/api/expenses', async (req, res) => {
    const shopId = req.shopId;
    const { description, amount, expenseDate, category, isGSTRApplicable } = req.body;
    
    if (!description || !amount || !expenseDate) {
        return res.status(400).json({ success: false, message: '‡§µ‡§ø‡§µ‡§∞‡§£, ‡§∞‡§æ‡§∂‡§ø ‡§î‡§∞ ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        const result = await pool.query(
            `INSERT INTO expenses (shop_id, description, amount, expense_date, category, is_gstr_applicable) 
             VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
            [shopId, description, amount, expenseDate, category || '‡§Ö‡§®‡•ç‡§Ø', isGSTRApplicable || false]
        );
        console.log(`‚úÖ Expense added: ${description}`);
        res.json({ success: true, message: '‡§ñ‡§∞‡•ç‡§ö ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ‡•§', expense: result.rows[0] });
    } catch (err) {
        console.error("Error adding expense:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•ç‡§ö ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/expenses - ‡§∏‡§≠‡•Ä ‡§ñ‡§∞‡•ç‡§ö ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
app.get('/api/expenses', async (req, res) => {
    const shopId = req.shopId;
    try {
        const result = await pool.query(
            'SELECT * FROM expenses WHERE shop_id = $1 ORDER BY expense_date DESC',
            [shopId]
        );
        res.json({ success: true, expenses: result.rows });
    } catch (err) {
        console.error("Error fetching expenses:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•ç‡§ö ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// DELETE /api/expenses/:id - ‡§ñ‡§∞‡•ç‡§ö ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
app.delete('/api/expenses/:id', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const expenseId = req.params.id;

    try {
        const result = await pool.query(
            'DELETE FROM expenses WHERE expense_id = $1 AND shop_id = $2 RETURNING *',
            [expenseId, shopId]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ success: false, message: '‡§ñ‡§∞‡•ç‡§ö ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§' });
        }

        console.log(`‚úÖ Expense deleted: ${expenseId}`);
        res.json({ success: true, message: '‡§ñ‡§∞‡•ç‡§ö ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§' });
    } catch (err) {
        console.error("Error deleting expense:", err.message);
        res.status(500).json({ success: false, message: '‡§ñ‡§∞‡•ç‡§ö ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// ----------------------------------------------------------------------------
// 5. CLOSING REPORTS (‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó)
// ----------------------------------------------------------------------------

// POST /api/closings - ‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
app.post('/api/closings', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    const { closingDate, totalSales, totalExpenses, cashInHand, notes } = req.body;

    if (!closingDate || !totalSales) {
        return res.status(400).json({ success: false, message: '‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§î‡§∞ ‡§ï‡•Å‡§≤ ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§' });
    }

    try {
        // ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø ‡§â‡§∏ ‡§¶‡§ø‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ï‡•ã‡§à ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§® ‡§π‡•ã
        const existing = await pool.query(
            'SELECT * FROM daily_closings WHERE shop_id = $1 AND closing_date = $2',
            [shopId, closingDate]
        );

        if (existing.rows.length > 0) {
            return res.status(409).json({ success: false, message: '‡§á‡§∏ ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ú‡§æ ‡§ö‡•Å‡§ï‡•Ä ‡§π‡•à‡•§' });
        }

        const result = await pool.query(
            `INSERT INTO daily_closings (shop_id, closing_date, total_sales, total_expenses, cash_in_hand, notes) 
             VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
            [shopId, closingDate, totalSales, totalExpenses || 0.0, cashInHand || 0.0, notes || null]
        );
        console.log(`‚úÖ Daily closing saved for: ${closingDate}`);
        res.json({ success: true, message: '‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à‡•§', closing: result.rows[0] });
    } catch (err) {
        console.error("Error saving daily closing:", err.message);
        res.status(500).json({ success: false, message: '‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});

// GET /api/closings - ‡§∏‡§≠‡•Ä ‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§≤‡•ã‡§ú‡§ø‡§Ç‡§ó ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
app.get('/api/closings', authorizeAdmin, async (req, res) => {
    const shopId = req.shopId;
    try {
        const result = await pool.query(
            'SELECT * FROM daily_closings WHERE shop_id = $1 ORDER BY closing_date DESC',
            [shopId]
        );
        res.json({ success: true, reports: result.rows });
    } catch (err) {
        console.error("Error fetching closing reports:", err.message);
        res.status(500).json({ success: false, message: '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: ' + err.message });
    }
});
// -----------------------------------------------------------------------------
// VI. SERVER INITIALIZATION 
// -----------------------------------------------------------------------------

// Default route
app.get('/', (req, res) => {
    res.send('Dukan Pro Backend is Running. Use /api/login or /api/verify-license.');
});
// Start the server after ensuring database tables are ready
createTables().then(() => {
    app.listen(PORT, () => {
        console.log(`\nüéâ Server is running securely on port ${PORT}`);
        console.log(`üåê API Endpoint: https://dukan-pro-ultimate.onrender.com:${PORT}`);
        console.log('--------------------------------------------------');
        console.log('üîí Authentication: JWT is required for all data routes.');
        console.log('üîë Multi-tenancy: All data is scoped by shop_id.\n');
    });
}).catch(error => {
    console.error('Failed to initialize database and start server:', error.message);
    // process.exit(1); // ‡§Ø‡§¶‡§ø DB ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§Ø‡§æ ‡§§‡•ã ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§∞‡•ã‡§ï‡•á‡§Ç
});
