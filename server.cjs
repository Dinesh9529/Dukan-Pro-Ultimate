// server.cjs (Dukan Pro - Ultimate Backend)

const express = require('express');
const { Pool } = require('pg');
const crypto = require('crypto');
const cors = require('cors');
// рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП 'helmet' рдХреЛ рдЬреЛрдбрд╝рдирд╛ рдПрдХ рдЕрдЪреНрдЫрд╛ рдЕрднреНрдпрд╛рд╕ рд╣реИ, рд▓реЗрдХрд┐рди рд╣рдордиреЗ рдЗрд╕реЗ minimal рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЫреЛрдбрд╝ рджрд┐рдпрд╛ рд╣реИ
require('dotenv').config(); // .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ environment variables рд▓реЛрдб рдХрд░реЗрдВ

const app = express();
const PORT = process.env.PORT || 10000;
// ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдк .env рдореЗрдВ рдЗрди рдорд╛рдиреЛрдВ рдХреЛ рдмрджрд▓ рджреЗрдВ
const SECRET_KEY = process.env.SECRET_KEY || 'your_secret_key_change_it'; 
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'default_admin_password_change_me'; 

// --- Encryption Constants ---
const IV_LENGTH = 16;
const ENCRYPTION_KEY = crypto.createHash('sha256').update(SECRET_KEY).digest(); 

// --- Middlewares ---
app.use(cors());
app.use(express.json());

// --- Database Setup ---
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

/**
 * тЬЕ рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрдзрд╛рд░: рдпрд╣ рдлрд╝рдВрдХреНрд╢рди рдЕрдм 'DROP TABLE' рдХрд╛ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд░рддрд╛ рд╣реИред
 * 'CREATE TABLE IF NOT EXISTS' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ, рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдбреЗрдЯрд╛ рд╣рдореЗрд╢рд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗред
 */
async function createTables() {
    const client = await pool.connect(); // рдмреЗрд╣рддрд░ рдХрдиреЗрдХреНрд╢рди рдкреНрд░рдмрдВрдзрди рдХреЗ рд▓рд┐рдП
    try {
        console.log('Attempting to ensure all tables exist (Data is safe)...');
        
        // тЭМ рдкреБрд░рд╛рдиреЗ DROP TABLE рдХрдорд╛рдВрдбреНрд╕ рдХреЛ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред

        // 1. Licenses Table
        await client.query(`
            CREATE TABLE IF NOT EXISTS licenses (
                key_hash TEXT PRIMARY KEY,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                expiry_date TIMESTAMP WITH TIME ZONE,
                is_trial BOOLEAN DEFAULT FALSE
            );
        `);

        // 2. Stock Table
        await client.query(`
            CREATE TABLE IF NOT EXISTS stock (
                id SERIAL PRIMARY KEY,
                sku TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                quantity NUMERIC NOT NULL,
                unit TEXT,
                purchase_price NUMERIC NOT NULL,
                sale_price NUMERIC NOT NULL,
                gst NUMERIC DEFAULT 0,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        
        // 3. Customers Table
        await client.query(`
            CREATE TABLE IF NOT EXISTS customers (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                phone TEXT UNIQUE,
                email TEXT UNIQUE,
                address TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 4. Invoices Table
        await client.query(`
            CREATE TABLE IF NOT EXISTS invoices (
                id SERIAL PRIMARY KEY,
                customer_id INTEGER REFERENCES customers(id),
                total_amount NUMERIC NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // 5. Invoice Items Table (ON DELETE CASCADE рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛)
        await client.query(`
            CREATE TABLE IF NOT EXISTS invoice_items (
                id SERIAL PRIMARY KEY,
                invoice_id INTEGER REFERENCES invoices(id) ON DELETE CASCADE,
                item_name TEXT NOT NULL,
                quantity NUMERIC NOT NULL,
                sale_price NUMERIC NOT NULL
            );
        `);
        
        // 6. Purchases Table
        await client.query(`
            CREATE TABLE IF NOT EXISTS purchases (
                id SERIAL PRIMARY KEY,
                supplier_name TEXT,
                item_details TEXT NOT NULL,
                total_cost NUMERIC NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        
        // 7. Expenses Table
        await client.query(`
            CREATE TABLE IF NOT EXISTS expenses (
                id SERIAL PRIMARY KEY,
                description TEXT NOT NULL,
                category TEXT,
                amount NUMERIC NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );
        `);
        
        console.log('тЬЕ All tables checked/created successfully (Data retained).');

    } catch (err) {
        console.error('тЭМ Error ensuring database tables:', err.message);
        process.exit(1);
    } finally {
        client.release(); // рдХрдиреЗрдХреНрд╢рди рд╡рд╛рдкрд╕ рдкреВрд▓ рдореЗрдВ рдЬрд╛рд░реА рдХрд░реЗрдВ
    }
}

// --- License Utilities ---

function hashKey(key) {
    return crypto.createHash('sha256').update(key).digest('hex');
}

// --- API Routes ---

// 1. Generate License Key
app.post('/api/generate-key', async (req, res) => {
    const { password, days } = req.body;
    
    // ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдЗрдирдкреБрдЯ рд╕рддреНрдпрд╛рдкрди
    if (password !== ADMIN_PASSWORD) {
        return res.status(401).json({ success: false, message: 'рдЕрдорд╛рдиреНрдп рдПрдбрдорд┐рди рдкрд╛рд╕рд╡рд░реНрдбред' });
    }
    if (typeof days !== 'number' || days < 1) {
         return res.status(400).json({ success: false, message: 'рджрд┐рдиреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛ рдорд╛рдиреНрдп рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред' });
    }

    // рдПрдХ рд░реИрдВрдбрдо Key рдЬреЗрдирд░реЗрдЯ рдХрд░реЗрдВ
    const rawKey = crypto.randomBytes(16).toString('hex');
    const keyHash = hashKey(rawKey);

    // рд╕рдорд╛рдкреНрддрд┐ рддрд┐рдерд┐ (Expiry Date) рдХреА рдЧрдгрдирд╛ рдХрд░реЗрдВ
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + days); // 'days' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ

    try {
        await pool.query(
            'INSERT INTO licenses (key_hash, expiry_date, is_trial) VALUES ($1, $2, $3)',
            [keyHash, expiryDate, days === 5]
        );
        
        // рдпреВрдЬрд╝рд░ рдХреЛ рдХреЗрд╡рд▓ Raw Key рджрд┐рдЦрд╛рдПрдВ
        res.json({ 
            success: true, 
            key: rawKey, 
            message: 'рд▓рд╛рдЗрд╕реЗрдВрд╕ рдХреБрдВрдЬреА рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛рдИ рдЧрдИред',
            duration_days: days,
            valid_until: expiryDate.toISOString() 
        });
    } catch (err) {
        console.error("Error generating key:", err.message);
        res.status(500).json({ success: false, message: 'рдХреБрдВрдЬреА рдмрдирд╛рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓: рдбреЗрдЯрд╛рдмреЗрд╕ рддреНрд░реБрдЯрд┐ред' });
    }
});

// 2. Verify License Key 
app.get('/api/verify-license', async (req, res) => {
    const rawKey = req.query.key;
    if (!rawKey) {
        return res.status(400).json({ success: false, message: 'рдХреБрдВрдЬреА рдЖрд╡рд╢реНрдпрдХ рд╣реИред' });
    }

    const keyHash = hashKey(rawKey);

    try {
        const result = await pool.query('SELECT expiry_date, is_trial FROM licenses WHERE key_hash = $1', [keyHash]);
        
        if (result.rows.length === 0) {
            return res.json({ success: false, valid: false, message: 'рдЕрдорд╛рдиреНрдп рд▓рд╛рдЗрд╕реЗрдВрд╕ рдХреБрдВрдЬреАред' });
        }

        const license = result.rows[0];
        const expiryDate = new Date(license.expiry_date);
        const now = new Date();
        const isValid = expiryDate > now;

        if (isValid) {
            return res.json({
                success: true,
                valid: true,
                isTrial: license.is_trial,
                message: 'рд▓рд╛рдЗрд╕реЗрдВрд╕ рд╕рддреНрдпрд╛рдкрд┐рдд рдФрд░ рд╕рдХреНрд░рд┐рдп рд╣реИред',
                expiryDate: expiryDate.toISOString()
            });
        } else {
            return res.json({ success: false, valid: false, message: 'рд▓рд╛рдЗрд╕реЗрдВрд╕ рдХреА рд╕рдордп рд╕реАрдорд╛ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдИ рд╣реИред' });
        }
    } catch (err) {
        console.error("Error verifying license:", err.message);
        res.status(500).json({ success: false, message: 'рд╕рддреНрдпрд╛рдкрди рд╡рд┐рдлрд▓: рд╕рд░реНрд╡рд░ рддреНрд░реБрдЯрд┐ред' });
    }
});

// 3. Admin Login
app.post('/api/admin-login', (req, res) => {
    const { password } = req.body;
    
    // ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдЗрдирдкреБрдЯ рд╕рддреНрдпрд╛рдкрди
    if (!password) {
        return res.status(400).json({ success: false, message: 'рдкрд╛рд╕рд╡рд░реНрдб рдЖрд╡рд╢реНрдпрдХ рд╣реИред' });
    }

    if (password === ADMIN_PASSWORD) {  
        return res.json({ success: true, message: 'рдПрдбрдорд┐рди рд▓реЙрдЧрд┐рди рд╕рдлрд▓ред' });
    } else {
        return res.status(401).json({ success: false, message: 'рдЕрдорд╛рдиреНрдп рдПрдбрдорд┐рди рдкрд╛рд╕рд╡рд░реНрдбред' });
    }
});

// 4. Stock Management - Add/Update (Simplistic Upsert)
app.post('/api/stock', async (req, res) => {
    const { sku, name, quantity, unit, purchase_price, sale_price, gst } = req.body;
    
    // ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдЗрдирдкреБрдЯ рд╕рддреНрдпрд╛рдкрди рдФрд░ рд╕реИрдирд┐рдЯрд╛рдЗрдЬреЗрд╢рди (Input Validation & Sanitization)
    if (!sku || !name || typeof quantity === 'undefined' || typeof purchase_price === 'undefined' || typeof sale_price === 'undefined') {
        return res.status(400).json({ success: false, message: 'SKU, рдирд╛рдо, рдорд╛рддреНрд░рд╛, рдЦрд░реАрдж рдореВрд▓реНрдп рдФрд░ рдмрд┐рдХреНрд░реА рдореВрд▓реНрдп рдЖрд╡рд╢реНрдпрдХ рд╣реИрдВред' });
    }
    
    // рд╕реНрдЯреНрд░рд┐рдВрдЧ рдЗрдирдкреБрдЯ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╛рд░реНрд╕рд┐рдВрдЧ
    const safeQuantity = parseFloat(quantity);
    const safePurchasePrice = parseFloat(purchase_price);
    const safeSalePrice = parseFloat(sale_price);
    const safeGst = parseFloat(gst || 0);

    if (isNaN(safeQuantity) || isNaN(safePurchasePrice) || isNaN(safeSalePrice)) {
        return res.status(400).json({ success: false, message: 'рдорд╛рддреНрд░рд╛, рдЦрд░реАрдж рдореВрд▓реНрдп рдФрд░ рдмрд┐рдХреНрд░реА рдореВрд▓реНрдп рдорд╛рдиреНрдп рд╕рдВрдЦреНрдпрд╛рдПрдБ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред' });
    }

    try {
        const result = await pool.query(
            `INSERT INTO stock (sku, name, quantity, unit, purchase_price, sale_price, gst)
             VALUES ($1, $2, $3, $4, $5, $6, $7)
             ON CONFLICT (sku) DO UPDATE
             SET 
                 quantity = stock.quantity + EXCLUDED.quantity, 
                 purchase_price = EXCLUDED.purchase_price,
                 sale_price = EXCLUDED.sale_price,
                 gst = EXCLUDED.gst,
                 updated_at = CURRENT_TIMESTAMP
             RETURNING *;`,
            [sku, name, safeQuantity, unit, safePurchasePrice, safeSalePrice, safeGst]
        );
        res.json({ success: true, stock: result.rows[0], message: 'рд╕реНрдЯреЙрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝рд╛/рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ред' });
    } catch (err) {
        console.error("Error adding stock:", err.message);
        res.status(500).json({ success: false, message: 'рд╕реНрдЯреЙрдХ рдЬреЛрдбрд╝рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓: ' + err.message });
    }
});

// 5. Stock Management - Get All
app.get('/api/stock', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM stock ORDER BY updated_at DESC');
        res.json({ success: true, stock: result.rows });
    } catch (err) {
        console.error("Error fetching stock:", err.message);
        res.status(500).json({ success: false, message: 'рд╕реНрдЯреЙрдХ рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }
});

// 6. Dashboard Data (Summary Metrics) - PostgreSQL рдХреЗ рд▓рд┐рдП рд╕реБрдзрд╛рд░рд╛ рдЧрдпрд╛
app.get('/api/get-dashboard-data', async (req, res) => {
    try {
        // 1. рдХреБрд▓ рдмрд┐рдХреНрд░реА рд░рд╛рдЬрд╕реНрд╡ (Total Sales Revenue) - Table name corrected to 'invoices'
        // COALESCE(SUM(total_amount), 0) рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЦрд╛рд▓реА рд╣реЛрдиреЗ рдкрд░ 0 рдЖрдП
        const salesResult = await pool.query("SELECT COALESCE(SUM(total_amount), 0) AS value FROM invoices");
        const totalSalesRevenue = parseFloat(salesResult.rows[0].value);

        // 2. рдХреБрд▓ рд╕реНрдЯреЙрдХ рдореВрд▓реНрдп (Total Stock Value)
        const stockValueResult = await pool.query("SELECT COALESCE(SUM(purchase_price * quantity), 0) AS value FROM stock");
        const totalStockValue = parseFloat(stockValueResult.rows[0].value);
        
        // 3. рдХреБрд▓ рдЧреНрд░рд╛рд╣рдХ (Total Customers) - Table name corrected to 'invoices'
        const customerResult = await pool.query("SELECT COUNT(DISTINCT customer_id) AS value FROM invoices WHERE customer_id IS NOT NULL");
        const totalCustomers = parseInt(customerResult.rows[0].value);

        // 4. рдХрдо рд╕реНрдЯреЙрдХ рдЖрдЗрдЯрдо (Low Stock Count)
        const lowStockResult = await pool.query("SELECT COUNT(id) AS value FROM stock WHERE quantity < 10");
        const lowStockCount = parseInt(lowStockResult.rows[0].value);

        // рдЕрдВрдд рдореЗрдВ, рд╕рднреА рдбреЗрдЯрд╛ рдХреЛ client рдХреЛ рднреЗрдЬреЗрдВ
        res.json({
            success: true,
            totalSalesRevenue: totalSalesRevenue,
            totalStockValue: totalStockValue,
            totalCustomers: totalCustomers,
            lowStockCount: lowStockCount
        });

    } catch (error) {
        console.error('рдбреИрд╢рдмреЛрд░реНрдб рдбреЗрдЯрд╛ SQL/PostgreSQL рдПрд░рд░:', error.message);
        res.status(500).json({ success: false, message: 'рдбреИрд╢рдмреЛрд░реНрдб рдбреЗрдЯрд╛ рд▓реЛрдб рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрд╛ред' });
    }
});

// 7. NEW API: Get Balance Sheet / Detailed Financials Data 
app.get('/api/get-balance-sheet-data', async (req, res) => {
    try {
        // --- 1. Current Inventory Value (Asset) ---
        const inventoryValueResult = await pool.query(`
            SELECT COALESCE(SUM(quantity * purchase_price), 0) AS inventory_value FROM stock;
        `);
        const currentInventoryValue = parseFloat(inventoryValueResult.rows[0].inventory_value);

        // --- 2. Total Revenue (P&L) ---
        const revenueResult = await pool.query(`
            SELECT COALESCE(SUM(total_amount), 0) AS total_revenue FROM invoices;
        `);
        const totalRevenue = parseFloat(revenueResult.rows[0].total_revenue);

        // --- 3. Total Purchases (P&L Cost) ---
        const purchasesResult = await pool.query(`
            SELECT COALESCE(SUM(total_cost), 0) AS total_purchases FROM purchases;
        `);
        const totalPurchases = parseFloat(purchasesResult.rows[0].total_purchases);

        // --- 4. Total Expenses (P&L Cost) ---
        const expensesResult = await pool.query(`
            SELECT COALESCE(SUM(amount), 0) AS total_expenses FROM expenses;
        `);
        const totalExpenses = parseFloat(expensesResult.rows[0].total_expenses);
        
        // --- 5. Calculation ---
        const grossProfit = totalRevenue - totalPurchases;
        const netProfit = grossProfit - totalExpenses;
        const totalAssets = currentInventoryValue; // Simplistic: Inventory is the main asset
        
        res.json({
            success: true,
            balanceSheet: {
                currentAssets: totalAssets,
                // Liabilities рдФрд░ Equity рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ placeholders рд╣реИрдВ, рдЖрдк рдмрд╛рдж рдореЗрдВ рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ
                totalLiabilities: 0.00,
                netWorth: totalAssets, // Simplistic
            },
            profitAndLoss: {
                totalRevenue: totalRevenue,
                totalPurchases: totalPurchases,
                totalExpenses: totalExpenses,
                grossProfit: grossProfit,
                netProfit: netProfit
            }
        });

    } catch (err) {
        console.error("Error fetching balance sheet data:", err.message);
        return res.status(500).json({ success: false, message: 'рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рддреНрддреАрдп рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }
});


// --- CRM API Routes (New) ---

// 8. Add Customer
app.post('/api/customer', async (req, res) => {
    const { name, phone, email, address } = req.body;
    // ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдЗрдирдкреБрдЯ рд╕рддреНрдпрд╛рдкрди
    if (!name) {
        return res.status(400).json({ success: false, message: 'рдЧреНрд░рд╛рд╣рдХ рдХрд╛ рдирд╛рдо рдЖрд╡рд╢реНрдпрдХ рд╣реИред' });
    }
    try {
        await pool.query(
            `INSERT INTO customers (name, phone, email, address) VALUES ($1, $2, $3, $4)`,
            [name, phone, email, address]
        );
        res.json({ success: true, message: 'рдЧреНрд░рд╛рд╣рдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ред' });
    } catch (err) {
        console.error("Error adding customer:", err.message);
        res.status(500).json({ success: false, message: 'рдЧреНрд░рд╛рд╣рдХ рдЬреЛрдбрд╝рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛ред' });
    }
});

// 9. Get Customers
app.get('/api/customer', async (req, res) => {
    try {
        const result = await pool.query(`SELECT * FROM customers ORDER BY created_at DESC;`);
        res.json({ success: true, customers: result.rows });
    } catch (err) {
        console.error("Error fetching customers:", err.message);
        res.status(500).json({ success: false, message: 'рдЧреНрд░рд╛рд╣рдХ рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }
});


// --- Purchases API Routes (New) ---

// 10. Add Purchase
app.post('/api/purchase', async (req, res) => {
    const { supplier_name, item_details, total_cost } = req.body;
    // ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдЗрдирдкреБрдЯ рд╕рддреНрдпрд╛рдкрди
    if (!item_details || typeof total_cost === 'undefined') {
        return res.status(400).json({ success: false, message: 'рдЦрд░реАрдж рд╡рд┐рд╡рд░рдг рдФрд░ рдХреБрд▓ рд▓рд╛рдЧрдд рдЖрд╡рд╢реНрдпрдХ рд╣реИрдВред' });
    }
    const safeTotalCost = parseFloat(total_cost);
    if (isNaN(safeTotalCost) || safeTotalCost <= 0) {
        return res.status(400).json({ success: false, message: 'рдХреБрд▓ рд▓рд╛рдЧрдд рдПрдХ рдорд╛рдиреНрдп рд╕рдВрдЦреНрдпрд╛ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред' });
    }

    try {
        await pool.query(
            `INSERT INTO purchases (supplier_name, item_details, total_cost) VALUES ($1, $2, $3)`,
            [supplier_name, item_details, safeTotalCost]
        );
        res.json({ success: true, message: 'рдЦрд░реАрдж рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рджрд░реНрдЬ рдХреА рдЧрдИред' });
    } catch (err) {
        console.error("Error adding purchase:", err.message);
        res.status(500).json({ success: false, message: 'рдЦрд░реАрдж рджрд░реНрдЬ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛ред' });
    }
});

// 11. Get Purchases
app.get('/api/purchase', async (req, res) => {
    try {
        const result = await pool.query(`SELECT * FROM purchases ORDER BY created_at DESC;`);
        res.json({ success: true, purchases: result.rows });
    } catch (err) {
        console.error("Error fetching purchases:", err.message);
        res.status(500).json({ success: false, message: 'рдЦрд░реАрдж рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }
});

// --- Expenses API Routes (New) ---

// 12. Add Expense
app.post('/api/expense', async (req, res) => {
    const { description, category, amount } = req.body;
    // ЁЯЪи рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрд╡рд┐рдзрд╛: рдЗрдирдкреБрдЯ рд╕рддреНрдпрд╛рдкрди
    if (!description || typeof amount === 'undefined') {
        return res.status(400).json({ success: false, message: 'рд╡рд┐рд╡рд░рдг рдФрд░ рд░рд╛рд╢рд┐ рдЖрд╡рд╢реНрдпрдХ рд╣реИрдВред' });
    }
    const safeAmount = parseFloat(amount);
    if (isNaN(safeAmount) || safeAmount <= 0) {
        return res.status(400).json({ success: false, message: 'рд░рд╛рд╢рд┐ рдПрдХ рдорд╛рдиреНрдп рд╕рдВрдЦреНрдпрд╛ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред' });
    }

    try {
        await pool.query(
            `INSERT INTO expenses (description, category, amount) VALUES ($1, $2, $3)`,
            [description, category, safeAmount]
        );
        res.json({ success: true, message: 'рдЦрд░реНрдЪ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рджрд░реНрдЬ рдХрд┐рдпрд╛ рдЧрдпрд╛ред' });
    } catch (err) {
        console.error("Error adding expense:", err.message);
        res.status(500).json({ success: false, message: 'рдЦрд░реНрдЪ рджрд░реНрдЬ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛ред' });
    }
});

// 13. Get Expenses
app.get('/api/expense', async (req, res) => {
    try {
        const result = await pool.query(`SELECT * FROM expenses ORDER BY created_at DESC;`);
        res.json({ success: true, expenses: result.rows });
    } catch (err) {
        console.error("Error fetching expenses:", err.message);
        res.status(500).json({ success: false, message: 'рдЦрд░реНрдЪ рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред' });
    }
});


// --- Server Initialization ---

pool.connect()
    .then(() => {
        console.log('PostgreSQL connection established.');
        return createTables(); // тЬЕ рдЕрдм рдпрд╣ рдбреЗрдЯрд╛ рдХреЛ рдмрд░рдХрд░рд╛рд░ рд░рдЦреЗрдЧрд╛
    })
    .then(() => {
        app.listen(PORT, () => {
            console.log(`Server is running on port ${PORT}`);
        });
    })
    .catch(err => {
        console.error('Database connection failed:', err.message);
        process.exit(1);
    });




